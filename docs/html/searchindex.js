Search.setIndex({"docnames": ["ast", "ast/antlr", "ast/expressions", "ast/index", "ast/statements", "ast/top_declarations", "code_generation", "code_generation/access", "code_generation/boolean", "code_generation/class_representation", "code_generation/function_generation", "code_generation/method_call", "code_generation/new_object", "code_generation/outline", "code_generation/title", "code_generation/variable", "index", "introduction", "introduction/why", "parser", "parser/title", "semantics", "semantics/title", "semantics/type_checking"], "filenames": ["ast.rst", "ast/antlr.rst", "ast/expressions.rst", "ast/index.rst", "ast/statements.rst", "ast/top_declarations.rst", "code_generation.rst", "code_generation/access.rst", "code_generation/boolean.rst", "code_generation/class_representation.rst", "code_generation/function_generation.rst", "code_generation/method_call.rst", "code_generation/new_object.rst", "code_generation/outline.rst", "code_generation/title.rst", "code_generation/variable.rst", "index.rst", "introduction.rst", "introduction/why.rst", "parser.rst", "parser/title.rst", "semantics.rst", "semantics/title.rst", "semantics/type_checking.rst"], "titles": ["<span class=\"section-number\">2. </span>Abstract Syntax Tree", "Antlr", "Expressions", "Abstract Syntax Tree", "Statements", "Top Level Declarations", "<span class=\"section-number\">5. </span>Code Generation", "Access", "Boolean Expression", "Class Rep", "Function Generation", "Method Call", "New Object Expression", "Outline", "Code Generation", "Variable", "LLOP: An Implementation of Mapping Objective Oriented Constructs to LLVM IR", "<span class=\"section-number\">1. </span>Introduction", "Introduction", "<span class=\"section-number\">3. </span>Parser", "Parser", "<span class=\"section-number\">4. </span>Semantics", "Semantics", "Type Checking"], "terms": {"A": [0, 5, 6, 10, 11], "its": [0, 5, 6, 9, 15], "super": [0, 5, 6, 7], "implement": [0, 5, 6, 9], "person": [0, 2, 5, 6, 12], "begin": [0, 4, 5, 6, 10, 11], "var": [0, 4, 5, 6, 11, 15], "ag": [0, 4, 5], "int": [0, 4, 5, 6, 8, 10, 11, 13, 15], "salari": [0, 4, 5], "func": [0, 5], "init": [0, 5, 6, 12], "void": [0, 5, 6, 10, 11, 13], "self": [0, 4, 5, 6, 7, 10, 11, 15], "end": [0, 4, 5, 6, 11], "getag": [0, 4, 5], "getsalari": [0, 5], "includ": [0, 5], "signatur": [0, 5], "bodi": [0, 5, 6, 11], "idea": [0, 5], "here": [0, 5, 6, 15, 17, 18], "we": [0, 5, 6, 9, 10, 11, 12, 13, 15], "want": [0, 5, 6, 9], "seper": [0, 5], "field": [0, 5, 6, 9, 12, 15], "from": [0, 5, 6, 9, 11, 12], "ones": [0, 5], "just": [0, 5, 6, 10], "like": [0, 5], "scala": [0, 5], "have": [0, 5, 6, 10, 11, 13], "yet": [0, 5], "becaus": [0, 5, 6, 9, 10, 13], "recurs": [0, 5], "depend": [0, 5], "compar": [0, 2, 5], "p1": [0, 4, 5], "p2": [0, 4, 5], "exampl": [0, 2, 4, 6, 11, 12], "variabledeclstat": [0, 4], "identifi": [0, 2, 4, 6, 9], "IF": [0, 4], "1000": [0, 4], "THEN": [0, 4], "els": [0, 4, 6, 9, 10, 11, 15], "500": [0, 4], "ifstat": [0, 4], "stmt": [0, 4, 6, 10], "0": [0, 2, 4, 6, 9, 10, 11, 12, 13], "1": [0, 4, 6, 9, 10, 11, 12], "whilestat": [0, 4], "returnstat": [0, 4], "outputstat": [0, 4], "10": [0, 2, 4, 6, 11, 12], "assignstat": [0, 4], "blockstat": [0, 4], "b": [0, 2], "multiplicativeexpr": [0, 2], "op": [0, 2], "mul": [0, 2], "div": [0, 2], "additiveexpr": [0, 2], "add": [0, 2, 6, 11], "sub": [0, 2], "isexpr": [0, 2], "referencetyp": [0, 2], "staticaccessexpr": [0, 2, 6, 7], "eat": [0, 2, 6, 11], "funcallexpr": [0, 2], "argumentlist": [0, 2], "employe": [0, 2, 6, 11], "typecoercionexpr": [0, 2], "accessexpr": [0, 2, 6, 7], "AND": [0, 2], "9": [0, 2, 6, 11], "andexpr": [0, 2, 6, 8], "OR": [0, 2], "orexpr": [0, 2, 6, 8], "NOT": [0, 2], "notexpr": [0, 2, 6, 8], "relationalexpr": [0, 2], "eq": [0, 2], "ne": [0, 2], "gt": [0, 2], "lt": [0, 2], "le": [0, 2], "ge": [0, 2], "20": [0, 2], "newexpr": [0, 2], "numexpr": [0, 2], "type": [4, 7, 8, 10, 11, 12, 15, 16], "expr": [4, 6, 7, 8, 12], "object": [5, 9, 11, 15], "return": [5, 6, 7, 8, 10, 11, 12, 13, 15], "function": [5, 9, 12, 13, 16], "i": [5, 6, 7, 9, 10, 11, 13, 15], "context": [6, 7, 8, 10, 11, 12, 13, 15], "program": [6, 11, 13], "creat": [6, 10, 13, 15], "stuff": [6, 13], "generatevirtualt": [6, 13], "generatestruct": [6, 13], "codegen": [6, 7, 8, 10, 11, 12, 13, 15], "thi": [6, 9, 10, 11, 13, 15], "generateinterfaceoffsett": [6, 13], "genvalu": [6, 7, 8, 10, 11, 12, 13, 15], "ctx": [6, 7, 8, 10, 11, 12, 13, 15], "interfac": [6, 13], "declar": [6, 13, 15, 16], "first": [6, 7, 9, 10, 11, 12, 13, 15], "auto": [6, 7, 8, 10, 11, 12, 13, 15], "interfacedecl": [6, 13], "second": [6, 9, 11, 13, 15], "each": [6, 9, 13], "could": [6, 13, 15], "need": [6, 10, 12, 13], "functionw": [6, 13], "when": [6, 13, 15], "staticdecl": [6, 13], "createfunct": [6, 13], "uniqu": [6, 13], "classdecl": [6, 11, 13], "setclassindex": [6, 13], "nullptr": [6, 10, 11, 13, 15], "setcurclass": [6, 13], "The": [6, 9, 13, 15], "two": [6, 13], "element": [6, 9, 11, 13], "parent": [6, 9, 11, 13], "vtabl": [6, 12, 13], "index": [6, 10, 11, 12, 13], "2": [6, 8, 9, 11, 12, 13], "f": [6, 10, 11, 12, 13], "insertintovtableiniti": [6, 13], "name": [6, 10, 11, 12, 13, 15], "curfunct": [6, 10, 13], "fill": [6, 13], "initi": [6, 13], "list": [6, 13], "buildvtabl": [6, 13], "clearcurclass": [6, 13], "setcurstat": [6, 13], "clearcurstat": [6, 13], "createstaticfunct": [6, 13], "header": [6, 10, 11, 13], "repres": [6, 9], "pointer": [6, 9, 10, 11, 12, 15], "remain": [6, 9, 11], "ar": [6, 9], "struct_person": [6, 9, 12], "ptr": [6, 9, 11, 12], "i32": [6, 9, 11, 12], "us": [6, 9], "determin": [6, 9, 11], "runtim": [6, 9], "": [6, 9, 12, 15], "effici": [6, 9], "access": [9, 15, 16], "dure": [6, 9, 10, 11], "actual": [6, 9], "inherit": [6, 9], "same": [6, 9, 15], "one": [6, 9, 15], "anoth": [6, 9, 10], "id_object": [6, 9], "intern": [6, 9], "constant": [6, 9], "id_person": [6, 9], "id_employe": [6, 9], "vtable_object": [6, 9], "x": [6, 9, 11, 12], "vtable_person": [6, 9, 12], "5": [6, 9, 12], "person_init_int_int": [6, 9], "person_getag": [6, 9], "person_getsalari": [6, 9], "vtable_employe": [6, 9], "8": [6, 9, 11, 12], "employee_init_int_int_int": [6, 9], "employee_getsalari": [6, 9], "employee_consum": [6, 9], "employee_earn": [6, 9], "employee_eat": [6, 9], "allo": [6, 11], "must": [6, 10, 11], "differnt": [6, 11], "paramet": [6, 11], "which": [6, 11], "run": [6, 11], "equal": [6, 11], "argument": [6, 10, 11, 12], "can": [6, 11, 17, 18], "upcast": [6, 11], "ot": [6, 11], "std": [6, 7, 10, 11, 12, 15], "pair": [6, 11, 15], "funchead": [6, 10, 11], "getclassmethodindex": [6, 11], "classtyp": [6, 11], "const": [6, 11, 12], "string": [6, 11, 12], "vector": [6, 11, 12], "param": [6, 10, 11], "tostr": [6, 10, 11, 15], "iter": [6, 11], "find_if": [6, 11], "funcdecl": [6, 10, 11], "m": [6, 11], "isfunctiontyp": [6, 11], "make_pair": [6, 10, 11], "funccallexpr": [6, 11], "generateclassmethodcal": [6, 11], "genarg": [6, 11], "receiv": [6, 7, 10, 11, 15], "recevi": [6, 11], "porint": [6, 11], "find": [6, 11, 15, 17, 18], "valu": [6, 8, 11, 12, 15], "arg": [6, 10, 11, 12], "push_back": [6, 11, 12], "itr": [6, 11], "classnam": [6, 11], "tabletyp": [6, 11, 12], "getvtabletyp": [6, 11, 12], "load": [6, 10, 11, 12, 15], "builder": [6, 8, 10, 11, 12, 15], "createload": [6, 11, 12, 15], "pointertyp": [6, 11], "get": [6, 11, 12], "createstructgep": [6, 11, 12, 15], "getstructtyp": [6, 11, 12, 15], "issup": [6, 11], "indic": [6, 11, 12], "constantint": [6, 11, 12], "inttyp": [6, 8, 11, 12, 15], "tp": [6, 11], "creategep": [6, 11, 12], "fp": [6, 11, 12], "intptrtyp": [6, 10, 11, 12, 15], "result": [6, 7, 8, 11], "createcal": [6, 11, 12], "headertollvmtyp": [6, 10, 11, 12], "true": [6, 11, 12], "returntyp": [6, 10, 11], "generatestaticmethodcal": [6, 11], "exact": [6, 11], "getstaticmethod": [6, 10, 11], "reserv": [6, 11], "size": [6, 10, 11, 12], "fals": [6, 11], "ifstmt": [6, 11], "conditionvalu": [6, 11], "condit": [6, 11], "thenblock": [6, 11], "createbasicblock": [6, 8, 10, 11], "elseblock": [6, 11], "mergeblock": [6, 8, 11], "merg": [6, 8, 11], "createcondbr": [6, 8, 11], "setinsertpoint": [6, 8, 10, 11], "thenstmt": [6, 11], "createbr": [6, 8, 11], "elsestmt": [6, 11], "whilestmt": [6, 11], "headerblock": [6, 11], "bodyblock": [6, 11], "exitblock": [6, 11], "exit": [6, 11], "leftblock": [6, 8], "left": [6, 8, 15], "rightblock": [6, 8], "right": [6, 8], "l": [6, 7, 8], "lh": [6, 7, 8], "r": [6, 8], "rh": [6, 7, 8], "phi": [6, 8], "createphi": [6, 8], "addincom": [6, 8], "valuetyp": [6, 8], "val": [6, 8], "createicmpeq": [6, 8], "zeroint": [6, 8], "To": [6, 12], "do": [6, 12], "follow": [6, 12], "thing": [6, 12], "calloc": [6, 12], "set": [6, 7, 12], "all": [6, 12], "uint64_t": [6, 12], "getstructs": [6, 12], "classstruct": [6, 12], "themodul": [6, 10, 12], "getdatalayout": [6, 12], "getstructlayout": [6, 12], "getsizeinbyt": [6, 12], "newobjectexpr": [6, 12], "accord": [6, 12], "modul": [6, 12], "data": [6, 12], "layout": [6, 12], "sizeofclass": [6, 12], "callocarg": [6, 12], "callocfunct": [6, 12], "structtyp": [6, 12], "getvtabl": [6, 12], "createstor": [6, 10, 12], "prepar": [6, 12], "getmethodhead": [6, 12], "mai": [6, 10], "other": [6, 10], "alreadi": [6, 10], "finish": [6, 10], "top": [6, 10, 15, 16], "level": [6, 7, 10, 15, 16], "block": [6, 10], "last": [6, 10], "insert": [6, 10], "statemtn": [6, 10], "throw": [6, 7, 10, 15], "an": [6, 10, 15], "error": [6, 10, 15], "ha": [6, 10], "been": [6, 10], "generatedfunct": [6, 10], "count": [6, 10], "setcurfunct": [6, 10], "main": [6, 10], "integ": [6, 10], "cout": [6, 10], "llvm": [6, 10], "funciton": [6, 10], "should": [6, 10], "befor": [6, 7, 10], "isinstaticmethod": [6, 10], "runtime_error": [6, 7, 10, 15], "found": [6, 10, 15], "emthod": [6, 10], "createcurfunct": [6, 10], "pushsymbolt": [6, 10], "addvaluetocurrentt": [6, 10, 15], "selfgenvalu": [6, 10], "curclass": [6, 10], "entryblock": [6, 10], "entri": [6, 10], "local": [6, 10, 15], "veriabl": [6, 10], "alloc": [6, 10, 15], "createalloca": [6, 10, 15], "doe": [6, 10], "islastlinereturnstmt": [6, 10], "isvoid": [6, 10], "createretvoid": [6, 10], "popsymbolt": [6, 10], "externallinkag": [6, 10], "getmethodsignatur": [6, 10], "curstat": [6, 10], "new": [8, 10, 11, 15, 16], "method": [9, 10, 13, 16], "If": [9, 10, 15], "static": [10, 13], "call": [10, 12, 13, 16], "class": [10, 13, 15, 16], "tabl": [10, 11, 12, 13, 15], "statement": [10, 16], "virtual": [11, 12, 13], "gener": [12, 13, 16], "struct": [11, 12, 15], "code": [13, 16], "id": 13, "introduct": 16, "abstract": 16, "syntax": 16, "tree": 16, "express": 16, "antlr": 16, "parser": 16, "semant": 16, "check": 16, "outlin": 16, "rep": 16, "boolean": 16, "aasasf": [21, 23], "incrementaccesslevel": [6, 7], "ispointertyp": [6, 7, 15], "refer": [6, 7], "decrementlevelaccess": [6, 7], "decrement": [6, 7], "setreceiv": [6, 7], "clearreceiv": [6, 7], "clear": [6, 7], "after": [6, 7], "selfexpr": [6, 7], "superexpr": [6, 7], "setstaticaccess": [6, 7], "whenev": [6, 15], "meet": [6, 15], "store": [6, 12, 15], "current": [6, 15], "symbol": [6, 15], "logic": [6, 15], "complec": [6, 15], "null": [6, 15], "ani": [6, 15], "cannot": [6, 15], "onli": [6, 15], "rather": [6, 15], "than": [6, 15], "variabledeclstmt": [6, 15], "getloadedvalu": [6, 15], "variableexpr": [6, 15], "bool": [6, 15], "loadpoint": [6, 15], "leftvalueflag": [6, 15], "toplevelaccess": [6, 15], "findvari": [6, 15], "isself": [6, 15], "getfieldruntim": [6, 15], "address": [6, 15], "variabl": 16, "100": [6, 12], "16": [6, 12], "3": [6, 12], "getelementptr": [6, 11, 12], "inbound": [6, 11, 12], "align": [6, 11, 12], "4": [6, 12], "compil": [6, 11, 17, 18], "time": [6, 11], "comput": [6, 11], "struct_employe": [6, 11], "11": [6, 11], "7": [6, 11], "12": [6, 11], "you": [17, 18], "repo": [17, 18], "http": [17, 18], "github": [17, 18], "com": [17, 18], "mxr2000": [17, 18], "llvm_oop": [17, 18]}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"abstract": [0, 3], "syntax": [0, 3], "tree": [0, 3], "top": [0, 5], "level": [0, 5], "declar": [0, 4, 5], "class": [0, 5, 6, 9, 11], "method": [0, 5, 6, 11], "static": [0, 2, 5, 6, 11], "interfac": [0, 5], "statement": [0, 4, 6, 11], "variabl": [0, 4, 6, 15], "If": [0, 4, 6, 11], "while": [0, 4, 6, 11], "return": [0, 4], "output": [0, 4], "assign": [0, 4], "block": [0, 4], "express": [0, 2, 6, 8, 12], "binari": [0, 2], "i": [0, 2], "access": [0, 2, 6, 7], "function": [0, 2, 6, 10, 11], "call": [0, 2, 6, 11], "type": [0, 2, 6, 9, 21, 23], "coercion": [0, 2], "And": [0, 2, 6, 8], "Or": [0, 2, 6, 8], "Not": [0, 2, 6, 8], "relat": [0, 2], "expr": [0, 2], "new": [0, 2, 6, 12], "object": [0, 2, 6, 12, 16], "number": [0, 2], "antlr": [0, 1], "code": [6, 14], "gener": [6, 10, 14], "outlin": [6, 13], "rep": [6, 9], "struct": [6, 9], "virtual": [6, 9], "tabl": [6, 9], "id": [6, 9], "overload": [6, 11], "branch": [6, 11], "boolean": [6, 8], "welcom": [], "llop": 16, "": [], "document": [], "introduct": [17, 18], "parser": [19, 20], "semant": [21, 22], "check": [21, 23], "an": 16, "implement": 16, "map": 16, "orient": 16, "construct": 16, "llvm": 16, "ir": 16}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Abstract Syntax Tree": [[0, "abstract-syntax-tree"], [3, "abstract-syntax-tree"]], "Top Level Declarations": [[0, "top-level-declarations"], [5, "top-level-declarations"]], "Class Declaration": [[0, "class-declaration"], [5, "class-declaration"]], "Method Declaration": [[0, "method-declaration"], [5, "method-declaration"]], "Static Declaration": [[0, "static-declaration"], [5, "static-declaration"]], "Interface Declaration": [[0, "interface-declaration"], [5, "interface-declaration"]], "Statements": [[0, "statements"], [4, "statements"]], "Variable Declaration": [[0, "variable-declaration"], [4, "variable-declaration"]], "If Statement": [[0, "if-statement"], [4, "if-statement"], [6, "if-statement"], [11, "if-statement"]], "While Statement": [[0, "while-statement"], [4, "while-statement"], [6, "while-statement"], [11, "while-statement"]], "Return Statement": [[0, "return-statement"], [4, "return-statement"]], "Output Statement": [[0, "output-statement"], [4, "output-statement"]], "Assignment": [[0, "assignment"], [4, "assignment"]], "Block Statement": [[0, "block-statement"], [4, "block-statement"]], "Expressions": [[0, "expressions"], [2, "expressions"]], "Binary Expression": [[0, "binary-expression"], [2, "binary-expression"]], "Is Expression": [[0, "is-expression"], [2, "is-expression"]], "Static Access": [[0, "static-access"], [2, "static-access"]], "Function Call": [[0, "function-call"], [2, "function-call"]], "Type Coercion": [[0, "type-coercion"], [2, "type-coercion"]], "Access": [[0, "access"], [2, "access"], [7, "access"], [6, "access"]], "And": [[0, "and"], [2, "and"]], "Or": [[0, "or"], [2, "or"]], "Not": [[0, "not"], [2, "not"]], "Relational Expr": [[0, "relational-expr"], [2, "relational-expr"]], "New Object": [[0, "new-object"], [2, "new-object"]], "Number": [[0, "number"], [2, "number"]], "Antlr": [[0, "antlr"], [1, "antlr"]], "Boolean Expression": [[8, "boolean-expression"], [6, "boolean-expression"]], "And Expression": [[8, "and-expression"], [6, "and-expression"]], "Or Expression": [[8, "or-expression"], [6, "or-expression"]], "Not Expression": [[8, "not-expression"], [6, "not-expression"]], "Class Rep": [[9, "class-rep"], [6, "class-rep"]], "Struct": [[9, "struct"], [6, "struct"]], "Virtual Table": [[9, "virtual-table"], [6, "virtual-table"]], "Type Id": [[9, "type-id"], [6, "type-id"]], "Function Generation": [[10, "function-generation"], [6, "function-generation"]], "Outline": [[13, "outline"], [6, "outline"]], "Code Generation": [[14, "code-generation"], [6, "code-generation"]], "Parser": [[19, "parser"], [20, "parser"]], "Semantics": [[21, "semantics"], [22, "semantics"]], "Type Checking": [[21, "type-checking"], [23, "type-checking"]], "Variable": [[15, "variable"], [6, "variable"]], "New Object Expression": [[12, "new-object-expression"], [6, "new-object-expression"]], "Method Call": [[6, "method-call"], [11, "method-call"]], "Function Overloadding": [[6, "function-overloadding"], [11, "function-overloadding"]], "Class Method Call": [[6, "class-method-call"], [11, "class-method-call"]], "Static Method Call": [[6, "static-method-call"], [11, "static-method-call"]], "Branches": [[6, "branches"], [11, "branches"]], "LLOP: An Implementation of Mapping Objective Oriented Constructs to LLVM IR": [[16, "llop-an-implementation-of-mapping-objective-oriented-constructs-to-llvm-ir"]], "Introduction": [[17, "introduction"], [18, "introduction"]]}, "indexentries": {}})