Search.setIndex({"docnames": ["ast", "ast/antlr", "ast/expressions", "ast/index", "ast/statements", "ast/top_declarations", "code_generation", "code_generation/boolean", "code_generation/class_representation", "code_generation/function_generation", "code_generation/method_call", "code_generation/new_object", "code_generation/outline", "code_generation/title", "index", "introduction", "introduction/why", "parser", "parser/title", "semantics", "semantics/title", "semantics/type_checking"], "filenames": ["ast.rst", "ast/antlr.rst", "ast/expressions.rst", "ast/index.rst", "ast/statements.rst", "ast/top_declarations.rst", "code_generation.rst", "code_generation/boolean.rst", "code_generation/class_representation.rst", "code_generation/function_generation.rst", "code_generation/method_call.rst", "code_generation/new_object.rst", "code_generation/outline.rst", "code_generation/title.rst", "index.rst", "introduction.rst", "introduction/why.rst", "parser.rst", "parser/title.rst", "semantics.rst", "semantics/title.rst", "semantics/type_checking.rst"], "titles": ["<span class=\"section-number\">2. </span>Abstract Syntax Tree", "Antlr", "Expressions", "Abstract Syntax Tree", "Statements", "Top Level Declarations", "<span class=\"section-number\">5. </span>Code Generation", "Boolean Expression", "Class Rep", "Function Generation", "Method Call", "New Object Expression", "Outline", "Code Generation", "Welcome to llop\u2019s documentation!", "<span class=\"section-number\">1. </span>Introduction", "Introduction", "<span class=\"section-number\">3. </span>Parser", "Parser", "<span class=\"section-number\">4. </span>Semantics", "Semantics", "Type Checking"], "terms": {"A": [0, 5, 6, 9, 10], "its": [0, 5, 6, 8], "super": [0, 5], "implement": [0, 5, 6, 8], "person": [0, 2, 5], "begin": [0, 4, 5, 6, 9, 10], "var": [0, 4, 5], "ag": [0, 4, 5], "int": [0, 4, 5, 6, 7, 9, 10, 12], "salari": [0, 4, 5], "func": [0, 5], "init": [0, 5, 6, 11], "void": [0, 5, 6, 9, 12], "self": [0, 4, 5, 6, 9, 10], "end": [0, 4, 5, 6, 10], "getag": [0, 4, 5], "getsalari": [0, 5], "includ": [0, 5], "signatur": [0, 5], "bodi": [0, 5, 6, 10], "idea": [0, 5], "here": [0, 5], "we": [0, 5, 6, 8, 9, 11, 12], "want": [0, 5, 6, 8], "seper": [0, 5], "field": [0, 5, 6, 8, 11], "from": [0, 5, 6, 8, 10, 11], "ones": [0, 5], "just": [0, 5, 6, 9], "like": [0, 5], "scala": [0, 5], "have": [0, 5, 6, 9, 10, 12], "yet": [0, 5], "becaus": [0, 5, 6, 8, 9, 12], "recurs": [0, 5], "depend": [0, 5], "compar": [0, 2, 5], "p1": [0, 4, 5], "p2": [0, 4, 5], "exampl": [0, 2, 4], "variabledeclstat": [0, 4], "identifi": [0, 2, 4, 6, 8], "IF": [0, 4], "1000": [0, 4], "THEN": [0, 4], "els": [0, 4, 6, 8, 9, 10], "500": [0, 4], "ifstat": [0, 4], "stmt": [0, 4, 6, 9], "0": [0, 2, 4, 6, 8, 9, 10, 11, 12], "1": [0, 4, 6, 8, 9, 10, 11], "whilestat": [0, 4], "returnstat": [0, 4], "outputstat": [0, 4], "10": [0, 2, 4], "assignstat": [0, 4], "blockstat": [0, 4], "b": [0, 2], "multiplicativeexpr": [0, 2], "op": [0, 2], "mul": [0, 2], "div": [0, 2], "additiveexpr": [0, 2], "add": [0, 2, 6, 10], "sub": [0, 2], "isexpr": [0, 2], "referencetyp": [0, 2], "staticaccessexpr": [0, 2], "eat": [0, 2], "funcallexpr": [0, 2], "argumentlist": [0, 2], "employe": [0, 2], "typecoercionexpr": [0, 2], "accessexpr": [0, 2], "AND": [0, 2], "9": [0, 2], "andexpr": [0, 2, 6, 7], "OR": [0, 2], "orexpr": [0, 2, 6, 7], "NOT": [0, 2], "notexpr": [0, 2, 6, 7], "relationalexpr": [0, 2], "eq": [0, 2], "ne": [0, 2], "gt": [0, 2], "lt": [0, 2], "le": [0, 2], "ge": [0, 2], "20": [0, 2], "newexpr": [0, 2], "numexpr": [0, 2], "type": [4, 7, 9, 10, 11, 14], "expr": [4, 6, 7, 11], "object": [5, 8, 10, 14], "return": [5, 6, 7, 9, 10, 11, 12], "function": [5, 8, 11, 12, 14], "i": [5, 6, 8, 9, 10, 12], "context": [6, 7, 9, 10, 11, 12], "program": [6, 10, 12], "creat": [6, 9, 12], "stuff": [6, 12], "generatevirtualt": [6, 12], "generatestruct": [6, 12], "codegen": [6, 7, 9, 10, 11, 12], "thi": [6, 8, 9, 10, 12], "generateinterfaceoffsett": [6, 12], "genvalu": [6, 7, 9, 10, 11, 12], "ctx": [6, 7, 9, 10, 11, 12], "interfac": [6, 12], "declar": [6, 12, 14], "first": [6, 8, 9, 10, 11, 12], "auto": [6, 7, 9, 10, 11, 12], "interfacedecl": [6, 12], "second": [6, 8, 10, 12], "each": [6, 8, 12], "could": [6, 12], "need": [6, 9, 11, 12], "functionw": [6, 12], "when": [6, 12], "staticdecl": [6, 12], "createfunct": [6, 12], "uniqu": [6, 12], "classdecl": [6, 10, 12], "setclassindex": [6, 12], "nullptr": [6, 9, 10, 12], "setcurclass": [6, 12], "The": [6, 8, 12], "two": [6, 12], "element": [6, 8, 12], "parent": [6, 8, 10, 12], "vtabl": [6, 11, 12], "index": [6, 9, 10, 11, 12], "2": [6, 7, 8, 10, 11, 12], "f": [6, 9, 10, 11, 12], "insertintovtableiniti": [6, 12], "name": [6, 9, 10, 11, 12], "curfunct": [6, 9, 12], "fill": [6, 12], "initi": [6, 12], "list": [6, 12], "buildvtabl": [6, 12], "clearcurclass": [6, 12], "setcurstat": [6, 12], "clearcurstat": [6, 12], "createstaticfunct": [6, 12], "header": [6, 9, 10, 12], "repres": [6, 8], "pointer": [6, 8, 9, 10, 11], "remain": [6, 8, 10], "ar": [6, 8], "struct_person": [6, 8], "ptr": [6, 8], "i32": [6, 8], "us": [6, 8], "determin": [6, 8, 10], "runtim": [6, 8], "": [6, 8, 11], "effici": [6, 8], "access": [6, 8], "dure": [6, 8, 9], "actual": [6, 8], "inherit": [6, 8], "same": [6, 8], "one": [6, 8], "anoth": [6, 8, 9], "id_object": [6, 8], "intern": [6, 8], "constant": [6, 8], "id_person": [6, 8], "id_employe": [6, 8], "vtable_object": [6, 8], "x": [6, 8], "vtable_person": [6, 8], "5": [6, 8], "person_init_int_int": [6, 8], "person_getag": [6, 8], "person_getsalari": [6, 8], "vtable_employe": [6, 8], "8": [6, 8], "employee_init_int_int_int": [6, 8], "employee_getsalari": [6, 8], "employee_consum": [6, 8], "employee_earn": [6, 8], "employee_eat": [6, 8], "allo": [6, 10], "must": [6, 9, 10], "differnt": [6, 10], "paramet": [6, 10], "which": [6, 10], "run": [6, 10], "equal": [6, 10], "argument": [6, 9, 10, 11], "can": [6, 10], "upcast": [6, 10], "ot": [6, 10], "std": [6, 9, 10, 11], "pair": [6, 10], "funchead": [6, 9, 10], "getclassmethodindex": [6, 10], "classtyp": [6, 10], "const": [6, 10, 11], "string": [6, 10, 11], "vector": [6, 10, 11], "param": [6, 9, 10], "tostr": [6, 9, 10], "iter": [6, 10], "find_if": [6, 10], "funcdecl": [6, 9, 10], "m": [6, 10], "isfunctiontyp": [6, 10], "make_pair": [6, 9, 10], "funccallexpr": [6, 10], "generateclassmethodcal": [6, 10], "genarg": [6, 10], "receiv": [6, 9, 10], "recevi": [6, 10], "porint": [6, 10], "find": [6, 10], "valu": [6, 7, 10, 11], "arg": [6, 9, 10, 11], "push_back": [6, 10, 11], "itr": [6, 10], "classnam": [6, 10], "tabletyp": [6, 10, 11], "getvtabletyp": [6, 10, 11], "load": [6, 9, 10, 11], "builder": [6, 7, 9, 10, 11], "createload": [6, 10, 11], "pointertyp": [6, 10], "get": [6, 10, 11], "createstructgep": [6, 10, 11], "getstructtyp": [6, 10, 11], "issup": [6, 10], "indic": [6, 10, 11], "constantint": [6, 10, 11], "inttyp": [6, 7, 10, 11], "tp": [6, 10], "creategep": [6, 10, 11], "fp": [6, 10, 11], "intptrtyp": [6, 9, 10, 11], "result": [6, 7, 10], "createcal": [6, 10, 11], "headertollvmtyp": [6, 9, 10, 11], "true": [6, 10, 11], "returntyp": [6, 9, 10], "generatestaticmethodcal": [6, 10], "exact": [6, 10], "getstaticmethod": [6, 9, 10], "reserv": [6, 10], "size": [6, 9, 10, 11], "fals": [6, 10], "ifstmt": [6, 10], "conditionvalu": [6, 10], "condit": [6, 10], "thenblock": [6, 10], "createbasicblock": [6, 7, 9, 10], "elseblock": [6, 10], "mergeblock": [6, 7, 10], "merg": [6, 7, 10], "createcondbr": [6, 7, 10], "setinsertpoint": [6, 7, 9, 10], "thenstmt": [6, 10], "createbr": [6, 7, 10], "elsestmt": [6, 10], "whilestmt": [6, 10], "headerblock": [6, 10], "bodyblock": [6, 10], "exitblock": [6, 10], "exit": [6, 10], "leftblock": [6, 7], "left": [6, 7], "rightblock": [6, 7], "right": [6, 7], "l": [6, 7], "lh": [6, 7], "r": [6, 7], "rh": [6, 7], "phi": [6, 7], "createphi": [6, 7], "addincom": [6, 7], "valuetyp": [6, 7], "val": [6, 7], "createicmpeq": [6, 7], "zeroint": [6, 7], "To": [6, 11], "do": [6, 11], "follow": [6, 11], "thing": [6, 11], "calloc": [6, 11], "set": [6, 11], "all": [6, 11], "uint64_t": [6, 11], "getstructs": [6, 11], "classstruct": [6, 11], "themodul": [6, 9, 11], "getdatalayout": [6, 11], "getstructlayout": [6, 11], "getsizeinbyt": [6, 11], "newobjectexpr": [6, 11], "accord": [6, 11], "modul": [6, 11], "data": [6, 11], "layout": [6, 11], "sizeofclass": [6, 11], "callocarg": [6, 11], "callocfunct": [6, 11], "structtyp": [6, 11], "getvtabl": [6, 11], "createstor": [6, 9, 11], "prepar": [6, 11], "getmethodhead": [6, 11], "mai": [6, 9], "other": [6, 9], "alreadi": [6, 9], "finish": [6, 9], "top": [6, 9, 14], "level": [6, 9, 14], "block": [6, 9], "last": [6, 9], "insert": [6, 9], "statemtn": [6, 9], "throw": [6, 9], "an": [6, 9], "error": [6, 9], "ha": [6, 9], "been": [6, 9], "generatedfunct": [6, 9], "count": [6, 9], "setcurfunct": [6, 9], "main": [6, 9], "integ": [6, 9], "cout": [6, 9], "llvm": [6, 9], "funciton": [6, 9], "should": [6, 9], "befor": [6, 9], "isinstaticmethod": [6, 9], "runtime_error": [6, 9], "found": [6, 9], "emthod": [6, 9], "createcurfunct": [6, 9], "pushsymbolt": [6, 9], "addvaluetocurrentt": [6, 9], "selfgenvalu": [6, 9], "curclass": [6, 9], "entryblock": [6, 9], "entri": [6, 9], "local": [6, 9], "veriabl": [6, 9], "alloc": [6, 9], "createalloca": [6, 9], "doe": [6, 9], "islastlinereturnstmt": [6, 9], "isvoid": [6, 9], "createretvoid": [6, 9], "popsymbolt": [6, 9], "externallinkag": [6, 9], "getmethodsignatur": [6, 9], "curstat": [6, 9], "new": [7, 9, 10, 14], "method": [8, 9, 12, 14], "If": [8, 9], "static": [9, 12], "call": [9, 11, 12, 14], "class": [9, 12, 14], "tabl": [9, 10, 11, 12], "statement": [9, 14], "virtual": [10, 11, 12], "gener": [11, 12, 14], "struct": 11, "code": [12, 14], "id": 12, "introduct": 14, "abstract": 14, "syntax": 14, "tree": 14, "express": 14, "antlr": 14, "parser": 14, "semant": 14, "check": 14, "outlin": 14, "rep": 14, "boolean": 14, "aasasf": [19, 21]}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"abstract": [0, 3], "syntax": [0, 3], "tree": [0, 3], "top": [0, 5], "level": [0, 5], "declar": [0, 4, 5], "class": [0, 5, 6, 8, 10], "method": [0, 5, 6, 10], "static": [0, 2, 5, 6, 10], "interfac": [0, 5], "statement": [0, 4, 6, 10], "variabl": [0, 4], "If": [0, 4, 6, 10], "while": [0, 4, 6, 10], "return": [0, 4], "output": [0, 4], "assign": [0, 4], "block": [0, 4], "express": [0, 2, 6, 7, 11], "binari": [0, 2], "i": [0, 2], "access": [0, 2], "function": [0, 2, 6, 9, 10], "call": [0, 2, 6, 10], "type": [0, 2, 6, 8, 19, 21], "coercion": [0, 2], "And": [0, 2, 6, 7], "Or": [0, 2, 6, 7], "Not": [0, 2, 6, 7], "relat": [0, 2], "expr": [0, 2], "new": [0, 2, 6, 11], "object": [0, 2, 6, 11], "number": [0, 2], "antlr": [0, 1], "code": [6, 13], "gener": [6, 9, 13], "outlin": [6, 12], "rep": [6, 8], "struct": [6, 8], "virtual": [6, 8], "tabl": [6, 8], "id": [6, 8], "overload": [6, 10], "branch": [6, 10], "boolean": [6, 7], "welcom": 14, "llop": 14, "": 14, "document": 14, "introduct": [15, 16], "parser": [17, 18], "semant": [19, 20], "check": [19, 21]}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Abstract Syntax Tree": [[0, "abstract-syntax-tree"], [3, "abstract-syntax-tree"]], "Top Level Declarations": [[0, "top-level-declarations"], [5, "top-level-declarations"]], "Class Declaration": [[0, "class-declaration"], [5, "class-declaration"]], "Method Declaration": [[0, "method-declaration"], [5, "method-declaration"]], "Static Declaration": [[0, "static-declaration"], [5, "static-declaration"]], "Interface Declaration": [[0, "interface-declaration"], [5, "interface-declaration"]], "Statements": [[0, "statements"], [4, "statements"]], "Variable Declaration": [[0, "variable-declaration"], [4, "variable-declaration"]], "If Statement": [[0, "if-statement"], [4, "if-statement"], [6, "if-statement"], [10, "if-statement"]], "While Statement": [[0, "while-statement"], [4, "while-statement"], [6, "while-statement"], [10, "while-statement"]], "Return Statement": [[0, "return-statement"], [4, "return-statement"]], "Output Statement": [[0, "output-statement"], [4, "output-statement"]], "Assignment": [[0, "assignment"], [4, "assignment"]], "Block Statement": [[0, "block-statement"], [4, "block-statement"]], "Expressions": [[0, "expressions"], [2, "expressions"]], "Binary Expression": [[0, "binary-expression"], [2, "binary-expression"]], "Is Expression": [[0, "is-expression"], [2, "is-expression"]], "Static Access": [[0, "static-access"], [2, "static-access"]], "Function Call": [[0, "function-call"], [2, "function-call"]], "Type Coercion": [[0, "type-coercion"], [2, "type-coercion"]], "Access": [[0, "access"], [2, "access"]], "And": [[0, "and"], [2, "and"]], "Or": [[0, "or"], [2, "or"]], "Not": [[0, "not"], [2, "not"]], "Relational Expr": [[0, "relational-expr"], [2, "relational-expr"]], "New Object": [[0, "new-object"], [2, "new-object"]], "Number": [[0, "number"], [2, "number"]], "Antlr": [[0, "antlr"], [1, "antlr"]], "Code Generation": [[6, "code-generation"], [13, "code-generation"]], "Outline": [[6, "outline"], [12, "outline"]], "Class Rep": [[6, "class-rep"], [8, "class-rep"]], "Struct": [[6, "struct"], [8, "struct"]], "Virtual Table": [[6, "virtual-table"], [8, "virtual-table"]], "Type Id": [[6, "type-id"], [8, "type-id"]], "Method Call": [[6, "method-call"], [10, "method-call"]], "Function Overloadding": [[6, "function-overloadding"], [10, "function-overloadding"]], "Class Method Call": [[6, "class-method-call"], [10, "class-method-call"]], "Static Method Call": [[6, "static-method-call"], [10, "static-method-call"]], "Branches": [[6, "branches"], [10, "branches"]], "Boolean Expression": [[6, "boolean-expression"], [7, "boolean-expression"]], "And Expression": [[6, "and-expression"], [7, "and-expression"]], "Or Expression": [[6, "or-expression"], [7, "or-expression"]], "Not Expression": [[6, "not-expression"], [7, "not-expression"]], "New Object Expression": [[6, "new-object-expression"], [11, "new-object-expression"]], "Function Generation": [[6, "function-generation"], [9, "function-generation"]], "Welcome to llop\u2019s documentation!": [[14, "welcome-to-llop-s-documentation"]], "Introduction": [[15, "introduction"], [16, "introduction"]], "Parser": [[17, "parser"], [18, "parser"]], "Semantics": [[19, "semantics"], [20, "semantics"]], "Type Checking": [[19, "type-checking"], [21, "type-checking"]]}, "indexentries": {}})